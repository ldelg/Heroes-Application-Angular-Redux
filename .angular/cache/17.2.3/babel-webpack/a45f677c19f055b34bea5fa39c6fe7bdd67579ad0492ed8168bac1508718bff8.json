{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/me/Desktop/Heroes-SPA/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { FormBuilder, ReactiveFormsModule } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { HeroesFacade } from '../heroes-page/heroes-facade/heroes.facade';\nimport { HeroFormComponent } from './hero-form.component';\ndescribe('HeroFormComponent', () => {\n  let component;\n  let fixture;\n  let heroesFacade;\n  let router;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    const heroesFacadeSpy = jasmine.createSpyObj('HeroesFacade', ['addNewHero', 'editHero']);\n    yield TestBed.configureTestingModule({\n      declarations: [HeroFormComponent],\n      imports: [ReactiveFormsModule, RouterTestingModule],\n      providers: [FormBuilder, {\n        provide: HeroesFacade,\n        useValue: heroesFacadeSpy\n      }, {\n        provide: ActivatedRoute,\n        useValue: {\n          snapshot: {\n            paramMap: {\n              get: () => 'testHero'\n            }\n          }\n        }\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(HeroFormComponent);\n    component = fixture.componentInstance;\n    heroesFacade = TestBed.inject(HeroesFacade);\n    router = TestBed.inject(Router);\n    spyOn(router, 'navigate');\n    fixture.detectChanges();\n  }));\n  it('should validate that name, power, and universe fields are required', () => {\n    component.heroForm.controls['name'].setValue('');\n    component.heroForm.controls['power'].setValue('');\n    component.heroForm.controls['universe'].setValue('');\n    expect(component.heroForm.valid).toBeFalsy();\n    component.heroForm.controls['name'].setValue('Batman');\n    component.heroForm.controls['power'].setValue('Rich');\n    component.heroForm.controls['universe'].setValue('DC');\n    expect(component.heroForm.valid).toBeTruthy();\n  });\n  describe('saveHero', () => {\n    it('should call addNewHero on submit in create mode', () => {\n      component.isEditMode = false;\n      component.saveHero();\n      expect(heroesFacade.addNewHero).toHaveBeenCalled();\n    });\n    it('should call editHero on submit in edit mode', () => {\n      component.isEditMode = true;\n      component.currentHero.name = 'Batman';\n      component.saveHero();\n      expect(heroesFacade.editHero).toHaveBeenCalledWith('Batman', component.heroForm.value);\n    });\n  });\n  // Navigation After Saving\n  it('should navigate to \"/heroes\" after saving', () => {\n    component.saveHero();\n    expect(router.navigate).toHaveBeenCalledWith(['/heroes']);\n  });\n});","map":{"version":3,"names":["TestBed","FormBuilder","ReactiveFormsModule","ActivatedRoute","Router","RouterTestingModule","HeroesFacade","HeroFormComponent","describe","component","fixture","heroesFacade","router","beforeEach","_asyncToGenerator","heroesFacadeSpy","jasmine","createSpyObj","configureTestingModule","declarations","imports","providers","provide","useValue","snapshot","paramMap","get","compileComponents","createComponent","componentInstance","inject","spyOn","detectChanges","it","heroForm","controls","setValue","expect","valid","toBeFalsy","toBeTruthy","isEditMode","saveHero","addNewHero","toHaveBeenCalled","currentHero","name","editHero","toHaveBeenCalledWith","value","navigate"],"sources":["C:\\Users\\me\\Desktop\\Heroes-SPA\\src\\navbar-pages\\hero-form\\hero-form.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { FormBuilder, ReactiveFormsModule } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { HeroesFacade } from '../heroes-page/heroes-facade/heroes.facade';\r\nimport { HeroFormComponent } from './hero-form.component';\r\n\r\ndescribe('HeroFormComponent', () => {\r\n  let component: HeroFormComponent;\r\n  let fixture: ComponentFixture<HeroFormComponent>;\r\n  let heroesFacade: jasmine.SpyObj<HeroesFacade>;\r\n  let router: Router;\r\n\r\n  beforeEach(async () => {\r\n    const heroesFacadeSpy = jasmine.createSpyObj('HeroesFacade', ['addNewHero', 'editHero']);\r\n\r\n    await TestBed.configureTestingModule({\r\n      declarations: [HeroFormComponent],\r\n      imports: [ReactiveFormsModule, RouterTestingModule],\r\n      providers: [\r\n        FormBuilder,\r\n        { provide: HeroesFacade, useValue: heroesFacadeSpy },\r\n        {\r\n          provide: ActivatedRoute,\r\n          useValue: { snapshot: { paramMap: { get: () => 'testHero' } } },\r\n        },\r\n      ],\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(HeroFormComponent);\r\n    component = fixture.componentInstance;\r\n    heroesFacade = TestBed.inject(HeroesFacade) as jasmine.SpyObj<HeroesFacade>;\r\n    router = TestBed.inject(Router);\r\n    spyOn(router, 'navigate');\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should validate that name, power, and universe fields are required', () => {\r\n    component.heroForm.controls['name'].setValue('');\r\n    component.heroForm.controls['power'].setValue('');\r\n    component.heroForm.controls['universe'].setValue('');\r\n    expect(component.heroForm.valid).toBeFalsy();\r\n\r\n    component.heroForm.controls['name'].setValue('Batman');\r\n    component.heroForm.controls['power'].setValue('Rich');\r\n    component.heroForm.controls['universe'].setValue('DC');\r\n    expect(component.heroForm.valid).toBeTruthy();\r\n  });\r\n\r\n  describe('saveHero', () => {\r\n    it('should call addNewHero on submit in create mode', () => {\r\n      component.isEditMode = false;\r\n      component.saveHero();\r\n      expect(heroesFacade.addNewHero).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should call editHero on submit in edit mode', () => {\r\n      component.isEditMode = true;\r\n      component.currentHero.name = 'Batman';\r\n      component.saveHero();\r\n      expect(heroesFacade.editHero).toHaveBeenCalledWith('Batman', component.heroForm.value);\r\n    });\r\n  });\r\n\r\n  // Navigation After Saving\r\n  it('should navigate to \"/heroes\" after saving', () => {\r\n    component.saveHero();\r\n    expect(router.navigate).toHaveBeenCalledWith(['/heroes']);\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}