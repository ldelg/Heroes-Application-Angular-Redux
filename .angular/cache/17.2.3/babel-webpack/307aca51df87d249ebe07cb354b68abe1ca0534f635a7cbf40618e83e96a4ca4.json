{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { HeroesRemote } from './heroes.remote';\nimport { NotificationService } from '../../../services/notification.service';\nlet HeroesFacade = class HeroesFacade {\n  constructor(heroesRemote, notification) {\n    this.heroesRemote = heroesRemote;\n    this.notification = notification;\n    this.allHeroes = [];\n    this.heroesSubject = new BehaviorSubject([]);\n  }\n  loadHeroes() {\n    this.heroesRemote.getHeroes$().subscribe({\n      next: heroes => {\n        this.allHeroes = heroes;\n        this.heroesSubject.next(heroes);\n      },\n      error: err => {\n        console.error('Failed to load heroes', err);\n      }\n    });\n  }\n  getHeroes$() {\n    return this.heroesSubject.asObservable();\n  }\n  filterHeroes(searchTerm) {\n    const filteredHeroes = this.allHeroes.filter(hero => hero.name.toLowerCase().includes(searchTerm.toLowerCase()));\n    this.heroesSubject.next(filteredHeroes);\n  }\n  deleteHero(heroName) {\n    this.allHeroes = this.allHeroes.filter(hero => hero.name !== heroName);\n    this.heroesSubject.next(this.allHeroes);\n    //this notification would hae to be inserted in the \"next\" part of the subscribe\n    this.notification.showNotification('Your Hero has been succesfully deleted!', ['deleted']);\n    //in a real-enviroment you would also perform a post call by updating your list\n    //this.heroesRemote.updateHeroes$(this.allHeroes).subscribe({\n    //next: () => {\n    //this.heroesSubject.next(this.allHeroes);\n    //},\n    //error: (err) => console.error('Failed to update heroes', err),\n    //});\n  }\n  addNewHero(newHero) {\n    this.allHeroes.push(newHero);\n    this.heroesSubject.next(this.allHeroes);\n    this.notification.showNotification('Your Hero has been succesfully added!', ['succesfull']);\n    // In a real enviroment scenario you might want to post this to the back-end\n    /* this.heroesRemote.updateHeroes$(this.allHeroes).subscribe({\n    next: (updatedHeroes) => {\n      this.allHeroes = updatedHeroes;\n      this.heroesSubject.next(this.allHeroes);\n    },\n    error: (err) => {\n      console.error('Failed to update heroes', err);\n    }\n    });\n    */\n  }\n  getSelectedHero(heroName = '') {\n    return this.allHeroes.find(hero => hero.name === heroName);\n  }\n  editHero(heroName, newData) {\n    const index = this.allHeroes.findIndex(hero => hero.name === heroName);\n    this.allHeroes[index] = {\n      ...this.allHeroes[index],\n      ...newData\n    };\n    this.heroesSubject.next(this.allHeroes);\n    this.notification.showNotification('Your Hero has been succesfully edited!', ['edited']);\n  }\n  static #_ = this.ctorParameters = () => [{\n    type: HeroesRemote\n  }, {\n    type: NotificationService\n  }];\n};\nHeroesFacade = __decorate([Injectable({\n  providedIn: 'root'\n})], HeroesFacade);\nexport { HeroesFacade };","map":{"version":3,"names":["Injectable","BehaviorSubject","HeroesRemote","NotificationService","HeroesFacade","constructor","heroesRemote","notification","allHeroes","heroesSubject","loadHeroes","getHeroes$","subscribe","next","heroes","error","err","console","asObservable","filterHeroes","searchTerm","filteredHeroes","filter","hero","name","toLowerCase","includes","deleteHero","heroName","showNotification","addNewHero","newHero","push","getSelectedHero","find","editHero","newData","index","findIndex","_","__decorate","providedIn"],"sources":["C:\\Users\\me\\Desktop\\Heroes-SPA\\src\\navbar-pages\\heroes-page\\heroes-facade\\heroes.facade.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { HeroesRemote } from './heroes.remote';\r\nimport { Hero } from '../../../models/hero.model';\r\nimport { NotificationService } from '../../../services/notification.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class HeroesFacade {\r\n  private allHeroes: Hero[] = [];\r\n  private heroesSubject = new BehaviorSubject<Hero[]>([]);\r\n\r\n  constructor(\r\n    private heroesRemote: HeroesRemote,\r\n    private notification: NotificationService\r\n  ) {}\r\n\r\n  public loadHeroes(): void {\r\n    this.heroesRemote.getHeroes$().subscribe({\r\n      next: (heroes: Hero[]) => {\r\n        this.allHeroes = heroes;\r\n        this.heroesSubject.next(heroes);\r\n      },\r\n      error: (err) => {\r\n        console.error('Failed to load heroes', err);\r\n      },\r\n    });\r\n  }\r\n\r\n  public getHeroes$(): Observable<Hero[]> {\r\n    return this.heroesSubject.asObservable();\r\n  }\r\n\r\n  public filterHeroes(searchTerm: string): void {\r\n    const filteredHeroes = this.allHeroes.filter((hero: Hero) =>\r\n      hero.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n\r\n    this.heroesSubject.next(filteredHeroes);\r\n  }\r\n\r\n  public deleteHero(heroName: string): void {\r\n    this.allHeroes = this.allHeroes.filter((hero) => hero.name !== heroName);\r\n    this.heroesSubject.next(this.allHeroes);\r\n    //this notification would hae to be inserted in the \"next\" part of the subscribe\r\n    this.notification.showNotification(\r\n      'Your Hero has been succesfully deleted!',\r\n      ['deleted']\r\n    );\r\n\r\n    //in a real-enviroment you would also perform a post call by updating your list\r\n    //this.heroesRemote.updateHeroes$(this.allHeroes).subscribe({\r\n    //next: () => {\r\n    //this.heroesSubject.next(this.allHeroes);\r\n    //},\r\n    //error: (err) => console.error('Failed to update heroes', err),\r\n    //});\r\n  }\r\n\r\n  public addNewHero(newHero: Hero): void {\r\n    this.allHeroes.push(newHero);\r\n    this.heroesSubject.next(this.allHeroes);\r\n    this.notification.showNotification(\r\n      'Your Hero has been succesfully added!',\r\n      ['succesfull']\r\n    );\r\n\r\n    // In a real enviroment scenario you might want to post this to the back-end\r\n    /* this.heroesRemote.updateHeroes$(this.allHeroes).subscribe({\r\n    next: (updatedHeroes) => {\r\n      this.allHeroes = updatedHeroes;\r\n      this.heroesSubject.next(this.allHeroes);\r\n    },\r\n    error: (err) => {\r\n      console.error('Failed to update heroes', err);\r\n    }\r\n  });\r\n  */\r\n  }\r\n\r\n  public getSelectedHero(heroName: string = ''): Hero {\r\n    return this.allHeroes.find((hero: Hero) => hero.name === heroName)!;\r\n  }\r\n\r\n  public editHero(heroName: string, newData: Hero): void {\r\n    const index = this.allHeroes.findIndex((hero) => hero.name === heroName);\r\n    this.allHeroes[index] = { ...this.allHeroes[index], ...newData };\r\n    this.heroesSubject.next(this.allHeroes);\r\n    this.notification.showNotification(\r\n      'Your Hero has been succesfully edited!',\r\n      ['edited']\r\n    );\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,eAAe,QAAoB,MAAM;AAClD,SAASC,YAAY,QAAQ,iBAAiB;AAE9C,SAASC,mBAAmB,QAAQ,wCAAwC;AAGrE,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAIvBC,YACUC,YAA0B,EAC1BC,YAAiC;IADjC,KAAAD,YAAY,GAAZA,YAAY;IACZ,KAAAC,YAAY,GAAZA,YAAY;IALd,KAAAC,SAAS,GAAW,EAAE;IACtB,KAAAC,aAAa,GAAG,IAAIR,eAAe,CAAS,EAAE,CAAC;EAKpD;EAEIS,UAAUA,CAAA;IACf,IAAI,CAACJ,YAAY,CAACK,UAAU,EAAE,CAACC,SAAS,CAAC;MACvCC,IAAI,EAAGC,MAAc,IAAI;QACvB,IAAI,CAACN,SAAS,GAAGM,MAAM;QACvB,IAAI,CAACL,aAAa,CAACI,IAAI,CAACC,MAAM,CAAC;MACjC,CAAC;MACDC,KAAK,EAAGC,GAAG,IAAI;QACbC,OAAO,CAACF,KAAK,CAAC,uBAAuB,EAAEC,GAAG,CAAC;MAC7C;KACD,CAAC;EACJ;EAEOL,UAAUA,CAAA;IACf,OAAO,IAAI,CAACF,aAAa,CAACS,YAAY,EAAE;EAC1C;EAEOC,YAAYA,CAACC,UAAkB;IACpC,MAAMC,cAAc,GAAG,IAAI,CAACb,SAAS,CAACc,MAAM,CAAEC,IAAU,IACtDA,IAAI,CAACC,IAAI,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACN,UAAU,CAACK,WAAW,EAAE,CAAC,CAC3D;IAED,IAAI,CAAChB,aAAa,CAACI,IAAI,CAACQ,cAAc,CAAC;EACzC;EAEOM,UAAUA,CAACC,QAAgB;IAChC,IAAI,CAACpB,SAAS,GAAG,IAAI,CAACA,SAAS,CAACc,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKI,QAAQ,CAAC;IACxE,IAAI,CAACnB,aAAa,CAACI,IAAI,CAAC,IAAI,CAACL,SAAS,CAAC;IACvC;IACA,IAAI,CAACD,YAAY,CAACsB,gBAAgB,CAChC,yCAAyC,EACzC,CAAC,SAAS,CAAC,CACZ;IAED;IACA;IACA;IACA;IACA;IACA;IACA;EACF;EAEOC,UAAUA,CAACC,OAAa;IAC7B,IAAI,CAACvB,SAAS,CAACwB,IAAI,CAACD,OAAO,CAAC;IAC5B,IAAI,CAACtB,aAAa,CAACI,IAAI,CAAC,IAAI,CAACL,SAAS,CAAC;IACvC,IAAI,CAACD,YAAY,CAACsB,gBAAgB,CAChC,uCAAuC,EACvC,CAAC,YAAY,CAAC,CACf;IAED;IACA;;;;;;;;;;EAUF;EAEOI,eAAeA,CAACL,QAAA,GAAmB,EAAE;IAC1C,OAAO,IAAI,CAACpB,SAAS,CAAC0B,IAAI,CAAEX,IAAU,IAAKA,IAAI,CAACC,IAAI,KAAKI,QAAQ,CAAE;EACrE;EAEOO,QAAQA,CAACP,QAAgB,EAAEQ,OAAa;IAC7C,MAAMC,KAAK,GAAG,IAAI,CAAC7B,SAAS,CAAC8B,SAAS,CAAEf,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKI,QAAQ,CAAC;IACxE,IAAI,CAACpB,SAAS,CAAC6B,KAAK,CAAC,GAAG;MAAE,GAAG,IAAI,CAAC7B,SAAS,CAAC6B,KAAK,CAAC;MAAE,GAAGD;IAAO,CAAE;IAChE,IAAI,CAAC3B,aAAa,CAACI,IAAI,CAAC,IAAI,CAACL,SAAS,CAAC;IACvC,IAAI,CAACD,YAAY,CAACsB,gBAAgB,CAChC,wCAAwC,EACxC,CAAC,QAAQ,CAAC,CACX;EACH;EAAC,QAAAU,CAAA,G;;;;;;AApFUnC,YAAY,GAAAoC,UAAA,EADxBxC,UAAU,CAAC;EAAEyC,UAAU,EAAE;AAAM,CAAE,CAAC,C,EACtBrC,YAAY,CAqFxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}