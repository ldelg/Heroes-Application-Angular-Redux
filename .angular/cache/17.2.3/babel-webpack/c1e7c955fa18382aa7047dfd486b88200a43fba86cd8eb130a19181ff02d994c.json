{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/me/Desktop/Heroes-SPA/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule, FormBuilder } from '@angular/forms';\nimport { ActivatedRoute, convertToParamMap, Router } from '@angular/router';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { HeroFormComponent } from './hero-form.component';\nimport { HeroesFacade } from '../heroes-page/heroes-facade/heroes.facade';\nimport { of } from 'rxjs';\ndescribe('HeroFormComponent', () => {\n  let component;\n  let fixture;\n  let router;\n  let heroesFacade;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    heroesFacade = jasmine.createSpyObj('HeroesFacade', ['addNewHero', 'editHero', 'getSelectedHero']);\n    heroesFacade.getSelectedHero.and.returnValue(of({\n      name: 'Existing Hero',\n      power: 'Super Strength',\n      universe: 'Marvel',\n      image: 'https://example.com/image.jpg',\n      description: 'A strong hero'\n    }));\n    yield TestBed.configureTestingModule({\n      declarations: [HeroFormComponent],\n      imports: [ReactiveFormsModule, RouterTestingModule, BrowserAnimationsModule, MatFormFieldModule, MatInputModule],\n      providers: [FormBuilder, {\n        provide: HeroesFacade,\n        useValue: heroesFacade\n      }, {\n        provide: ActivatedRoute,\n        useValue: {\n          snapshot: {\n            paramMap: convertToParamMap({\n              name: 'existingHero'\n            })\n          }\n        }\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(HeroFormComponent);\n    component = fixture.componentInstance;\n    router = TestBed.inject(Router);\n    spyOn(router, 'navigate');\n    fixture.detectChanges();\n  }));\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should validate that name, power, and universe fields are required', () => {\n    component.heroForm.controls['name'].setValue('');\n    component.heroForm.controls['power'].setValue('');\n    component.heroForm.controls['universe'].setValue('');\n    expect(component.heroForm.valid).toBeFalsy();\n    component.heroForm.controls['name'].setValue('Hero Name');\n    component.heroForm.controls['power'].setValue('Hero Power');\n    component.heroForm.controls['universe'].setValue('Hero Universe');\n    expect(component.heroForm.valid).toBeTruthy();\n  });\n  it('should call addNewHero on submit in create mode', () => {\n    // Assuming isEditMode is false by default\n    component.saveHero();\n    expect(heroesFacade.addNewHero).toHaveBeenCalled();\n  });\n  it('should call editHero on submit in edit mode', () => {\n    component.isEditMode = true; // Simulate edit mode\n    component.currentHero.name = 'Existing Hero'; // Set a hero name to edit\n    component.saveHero();\n    expect(heroesFacade.editHero).toHaveBeenCalledWith('Existing Hero', component.heroForm.value);\n  });\n  it('should navigate to \"/heroes\" after saving', () => {\n    component.saveHero();\n    expect(router.navigate).toHaveBeenCalledWith(['/heroes']);\n  });\n});","map":{"version":3,"names":["TestBed","ReactiveFormsModule","FormBuilder","ActivatedRoute","convertToParamMap","Router","RouterTestingModule","BrowserAnimationsModule","MatFormFieldModule","MatInputModule","HeroFormComponent","HeroesFacade","of","describe","component","fixture","router","heroesFacade","beforeEach","_asyncToGenerator","jasmine","createSpyObj","getSelectedHero","and","returnValue","name","power","universe","image","description","configureTestingModule","declarations","imports","providers","provide","useValue","snapshot","paramMap","compileComponents","createComponent","componentInstance","inject","spyOn","detectChanges","it","expect","toBeTruthy","heroForm","controls","setValue","valid","toBeFalsy","saveHero","addNewHero","toHaveBeenCalled","isEditMode","currentHero","editHero","toHaveBeenCalledWith","value","navigate"],"sources":["C:\\Users\\me\\Desktop\\Heroes-SPA\\src\\navbar-pages\\hero-form\\hero-form.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { ReactiveFormsModule, FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute, convertToParamMap, Router } from '@angular/router';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { HeroFormComponent } from './hero-form.component';\r\nimport { HeroesFacade } from '../heroes-page/heroes-facade/heroes.facade';\r\nimport { of } from 'rxjs';\r\n\r\ndescribe('HeroFormComponent', () => {\r\n  let component: HeroFormComponent;\r\n  let fixture: ComponentFixture<HeroFormComponent>;\r\n  let router: Router;\r\n  let heroesFacade: jasmine.SpyObj<HeroesFacade>;\r\n\r\n  beforeEach(async () => {\r\n    heroesFacade = jasmine.createSpyObj('HeroesFacade', [\r\n      'addNewHero',\r\n      'editHero',\r\n      'getSelectedHero',\r\n    ]);\r\n    heroesFacade.getSelectedHero.and.returnValue(\r\n      of({\r\n        name: 'Existing Hero',\r\n        power: 'Super Strength',\r\n        universe: 'Marvel',\r\n        image: 'https://example.com/image.jpg',\r\n        description: 'A strong hero',\r\n      })\r\n    );\r\n\r\n    await TestBed.configureTestingModule({\r\n      declarations: [HeroFormComponent],\r\n      imports: [\r\n        ReactiveFormsModule,\r\n        RouterTestingModule,\r\n        BrowserAnimationsModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n      ],\r\n      providers: [\r\n        FormBuilder,\r\n        { provide: HeroesFacade, useValue: heroesFacade },\r\n        {\r\n          provide: ActivatedRoute,\r\n          useValue: {\r\n            snapshot: {\r\n              paramMap: convertToParamMap({ name: 'existingHero' }),\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(HeroFormComponent);\r\n    component = fixture.componentInstance;\r\n    router = TestBed.inject(Router);\r\n    spyOn(router, 'navigate');\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should validate that name, power, and universe fields are required', () => {\r\n    component.heroForm.controls['name'].setValue('');\r\n    component.heroForm.controls['power'].setValue('');\r\n    component.heroForm.controls['universe'].setValue('');\r\n    expect(component.heroForm.valid).toBeFalsy();\r\n\r\n    component.heroForm.controls['name'].setValue('Hero Name');\r\n    component.heroForm.controls['power'].setValue('Hero Power');\r\n    component.heroForm.controls['universe'].setValue('Hero Universe');\r\n    expect(component.heroForm.valid).toBeTruthy();\r\n  });\r\n\r\n  it('should call addNewHero on submit in create mode', () => {\r\n    // Assuming isEditMode is false by default\r\n    component.saveHero();\r\n    expect(heroesFacade.addNewHero).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should call editHero on submit in edit mode', () => {\r\n    component.isEditMode = true; // Simulate edit mode\r\n    component.currentHero.name = 'Existing Hero'; // Set a hero name to edit\r\n    component.saveHero();\r\n    expect(heroesFacade.editHero).toHaveBeenCalledWith(\r\n      'Existing Hero',\r\n      component.heroForm.value\r\n    );\r\n  });\r\n\r\n  it('should navigate to \"/heroes\" after saving', () => {\r\n    component.saveHero();\r\n    expect(router.navigate).toHaveBeenCalledWith(['/heroes']);\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}